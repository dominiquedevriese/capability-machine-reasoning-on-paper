PhD Defence (30-45 min (talk with head of assessment committee?)
* Introduction
Outline, say that I will start simple, so hopefully everyone can follow.
Later, I will go over the publications.
* Breaking down the title
Idea: Maybe have side by side with the below on one side and the formal representation on the other?
First describe computer in terms of computation unit (me) and memory (notepad).
Computation unit can do simple computations, e.g. addition.
I get the instructions from the notepad.
I can only keep so many things in mind, e.g. registers.
I can store numbers to the notepad for later use.

A computer runs many programs (illustrate by several people writing to notepad?).
One of them may be malicious - can have me read and alter the things other programs stored.

-- Introduce capabilities --

Now, all access to the notepad has to go through pass control/librarian/police officer/...
I have to provide the capability in order to perform actions on the memory, read, write, etc.

Other reasons capability are interesting...
-- Computer as stack of abstractions --
play("success.wav")    
  ---
1+2
...
  ---
<alien text>

On the other side:
HL lang, assembly, hardware

Question: how do we preserve abstractions. In particular, how do we preserve them if we have program running in the context of possibly malicious code.
Need to enforce them! How can we be sure that the enforcement works? We prove it mathematically! Formal proofs.


** What are capabilities?
During my PhD, colleagues have been nice to me and sent me papers and links to projects about capabilities because they thought it might be of interest.
Unfortunately, capability is a very ambiguous term in computer science as capabilities exist on different abstraction layers. (slide with layers with capabilities everywhere?)
So what is a capability? For the most part, it depends on the context, but it seems that capabilities can commonly be described as 
"_Unforgeable_ tokens of _authority_"
In order to say what we mean by capability, we need to look at the domain.
In other words, we need to describe what we mean by machine.
** What are machines?
** What is a capability machine
** Why are capability machines of interest? (Enforcing language properties, e.g. WBCF and LSE)
*** Illustrating layers of abstractions
*** Explain WBCF and LSE
** Formal reasoning (informally, speaking)
We need to make sure that our enforcement mechanisms cannot be circumvented. 
We need a formal, 100% watertight mathematical proof that they cannot be circumvented.
** Sketch of formal reasoning for cap machines?
*** Build mathematical model of a capability machine (how it behaves).
*** Build a semantic model that captures the behaviour of the elements of the capability machine.

* Publication overview
** ESOP (best paper nominee)
*** Give an idea about enforcement mechanism?
Local capabilities
Activation records on the stack
*** Describe the formal proofs
Correctness proof of a number of examples that depend highly on the desired properties.
Correctness proven in a model that is more general than the specific examples and even more general than calling convention.
** POPL
*** Describe enforcement mechanism
Linear capabilities
*** Give some insight into proving WBCF and LSE, i.e. fully abstract overlay semantics.
* Conclusion
