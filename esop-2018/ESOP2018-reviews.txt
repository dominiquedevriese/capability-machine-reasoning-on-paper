ESOP '18 Paper #2 Reviews and Comments
===========================================================================
Paper #5 Reasoning About a Capability Machine with Local Capabilities -
Provably Safe Stack and Return Pointer Management (without OS Support)


Review #5A
===========================================================================

Overall merit
-------------
A. Accept (Good paper. I will champion it at the PC meeting.)

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
The paper introduces a new calling convention for a simple capability
machine and uses a sophisticated logical relation to show that this
enforces capability safety and control-flow correctness.

### This is great work:

+ The studied simple capability machine is nice and elegant

+ The new calling convention is non-trivial and seems to help ease the
  proof burden. This only comes up in the discussion at the end, but
  the calling convention is also modular and can be applied to protect
  multiple components from each other.

+ The paper introduces an untyped step-indexed logical relation whose
  fundamental theorem corresponds to a notion of capability
  safety. This logical relation makes novel use of a "single
  orthogonal closure", which provides more flexibly than
  biorthogonality in the setting of low-level languages.

+ Technique illustrated on 5 verification examples, some of them tricky.

+ Paper is nicely explained and pleasant to read. I particularly liked
  the examples in Section 5 and loved the honest and extensive
  discussion of Section 6. I was already wondering about many of the points
  of Section 6. The paper has limitations, but as far as I can tell
  they are all explicitly acknowledged and properly explained. This is
  great science! Well done!

- As the paper already discusses, the main limitation of the proposed
  scheme is that it relies on complex global invariants/restrictions
  that prevent the capability machine to use local capabilities for
  anything else other than protecting the stack.

- Efficiency of the proposed calling convention is still to be determined.

Comments for author
-------------------
## Efficiency

The paper makes several efficiency claims, but in the absence of any
experiments to back up these claims I would advise the authors to be a
bit more cautious. Even if one disregards the cleaning of large ranges
of memory, which could indeed be done with some extra hardware, the
calling convention still seems more complicated than the usual
ones. For instance, cleaning and restoring registers alone might make
the overheads unacceptable in many practical scenarios. The "link
table" seems to add overhead too, etc. Finally, "acceptable
performance" is very much context dependent, for systems people that's
less than 10-20% overhead, for crypto people it's 0 overhead.

## Lower TCB capability safety property

While setting up the logical relation so that the fundamental property
implies capability safety is nice, it would be even nicer to prove
this as a separate theorem that doesn't have the whole logical
relation in its TCB. Would this be possible?

## Clarify attacker model earlier

The proposed calling convention seems able to protect multiple
components from each other, yet most of the paper discusses this
protection only in terms of one single statically known
"adversary". This seems to be selling short the work, and raising
questions of whether this calling convention is much weaker
security-wise than the CHERI one, which is clearly about protecting
multiple components. It would be good to explain this better upfront,
not just in the discussions section at the end.

### Formulating control flow correctness 

Compiling a language in which control flow is "obviously" well
bracketed to this calling convention and proving the security of this
compiler is indeed one way to characterize control flow correctness in
a general way. I wonder if full abstraction is the right notion of
secure compilation for this though, given that all your examples were
concerned with safety in an adversarial context, not with
observational equivalence. Another hint full abstraction might not
be a good fit here is that CFI is also a safety property, and full
abstraction is not directly related to safety.

### Requirement for stack clearing

Here are some classical papers that do range memory update with
hardware support (for metadata, but not sure it matters):
http://scale.eecs.berkeley.edu/papers/mmp-asplos2002.pdf
https://www.usenix.org/legacy/event/osdi08/tech/full_papers/zeldovich/zeldovich_html/index.html
http://users.ece.utexas.edu/~tiwari/pubs/MICRO-08-rangecache.pdf

### Not all secure compilation work uses centralized stack manager

Here's recent work using a tag-based architecture for enforcing the
call-return discipline in a decentralized way using linear return
capabilities: https://arxiv.org/abs/1510.00697

### Little things

- title is an extreme mouthful; in the first part could at least
  consider dropping the first "Capability", i.e. "Reasoning about a
  Machine with Local Capabilities"; also drop "(without OS support)",
  it's just too much, this is not yet the abstract

- The first two phrases in the abstract don't read very well and they
  have a large verbatim duplication

- also abstract "These results are not tied to our calling
  convention" -- by "these results" you mean the logical relation,
  right? should make it clear

- p2. "namely for the duration of a function invocation whereafter the
  capability can be revoked." -- can be revoked or is automatically revoked?

- p2. "reasoning about code on a representative capability machine code" -- code

- p4. Figure 2. Please turn off justified alignment for the last
  column, it makes it harder to read with all that useless space

- p6. "In order to have a reasonably realistic system, we use a simple
  model of linking, so programs can have access to other programs
  through a linking table." -- this should be better explained, what
  does this table contain?

- p10. "The macros push r and pop r work as one would expect." -- It
  would be equally short to say that "push r and pop r add and remove
  values from the stack" or anything that mentions the stack

- Still didn't get why these macros are introduced at the end of
  Section 3. They are not used at all in Section 4, so isn't a more
  natural space for them the beginning of Section 5, where they are
  first used?

- p19. Lemma 4. One more lemma that looks the same as all the
  others. Why not make some space for more interesting things by only
  stating the first such lemma formally?

- p22. "Adversary callbacks on the other hand are required to be
  global but the callbacks we construct ourselves are allocated on the
  heap and also global." -- The "on the other hand" is misleading,
  since all your saying is that *also* for callbacks your scheme is
  modular, while the "on the other hand" can trick the reader into
  believing otherwise.

- p22. "in very specific scenarioâ€™s" -- scenarios

- p23. "Interestingly, [24] also use a step-indexed, Kripke logical
  relation" -- this should be "Hur et al [24]" (\citet), in general
  using citations as nouns is quite grose



Review #5B
===========================================================================

Overall merit
-------------
A. Accept (Good paper. I will champion it at the PC meeting.)

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
Capability architectures provide security protection in hardware by
replacing machine-word pointers with non-forgeable capabilities.  This
is an old idea, recently re-examined in the CRASH SAFE and CHERI
projects; the latter exploring how capabilities can be provided as
pragmatically feasible adaptations of modern architectures.

This paper shows how one can establish rigorous security properties
provided by a (somewhat simplified but representative) capability
architecture, coupled with a specific calling convention developed by
the authors.  They do so using a logical relation, which they
exercise to verify properties of three concrete but highly non-trivial
examples. 

Most previous work on such machines has mostly been from a
systems/security point of view, with the intended security properties
only stated rather informally, let alone actually proved. It's good to
see how that can be done.  There's a lot of technical machinery under
the hood (in a technical appendix), which I've not tried to follow,
but the paper does a good job of explaining the basic ideas.

I don't really buy the practicality of the specific calling
convention, which requires efficient clearing of potentially large
regions of memory, but I think that's a secondary point here. 

More can probably be done to explain the logical relation, e.g. by
inferring general security properties (not just concrete examples)
that can be more easily explained.



Review #5C
===========================================================================

Overall merit
-------------
A. Accept (Good paper. I will champion it at the PC meeting.)

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
The paper describes a secure calling convention for a capability-based processor similar to CHERI.  The calling convention makes good use of CHERI's local capabilities to ensure control-flow integrity (when calling untrusted code from trusted code, the untrusted callee must return to where the caller expects it, with the stack pointer that the caller expects, and cannot return multiple times) in addition to data integrity of the stack frames.  

To help reason about the guarantees offered by capabilities, the paper then sets up a unary, untyped, step-indexed, Kripke-style logical relation for an operational semantics of a simple assembly language with CHERI-like capabilities.  After stating the "fundamental theorem" for this logical relation, the paper uses it to prove some security properties (local state encapsulation, well-bracketed control flow) on fragments of assembly code that use the calling convention outlined earlier.

Comments for author
-------------------
## General comments

This is an ambitious paper that covers a lot of material within the page limits of an ESOP submission: not just the design of the calling convention and the verification infrastructure that I mentioned above, but also a decent summary of capability machines and the kind of security guarantees they (try to) provide.  

Actually, the paper is "just" a high-level overview of a 90-page technical appendix which was submitted as supplementary material, which I skimmed too, and which looks like it's still missing some important material (namely, high-level but formal specifications of what every macro does, in the style of section 2's specification of what the malloc macro does).

So, that's a lot of material, and it is a strong point in favor of the paper that it remains globally understandable despite covering so much ground.  Less in favor of the submission, it reads like two papers joined at the hip by the examples of verification in section 5.  One paper is on secure calling conventions and how to use capabilities to implement them; the other paper is on a semantic framework to reason about capabilities and the security guarantees they enforce.  Commenting on each paper separately:

### Paper #1

Paper #1 on calling conventions describes an interesting and probably original point in the design space.  The design space itself is not really described: this is a single-stack solution; approaches based on multiple stacks are mentioned but brushed away; stackless approaches (with heap-allocated activation records or stack fragments) are not even mentioned.

Likewise, CHERI capabilities are assumed, and especially the "local" capabilities of CHERI which play a crucial role, but I missed a discussion of what can still be done if a smaller set of capabilities is provided, or, on the other hand, what could be done better with more advanced hardware capabilities.  Indeed, it looks like what the calling convention really needs is linearity guarantees on the stack pointer and the return addresses, and it's only because such "linear pointers" are not supported by the hardware that an encoding based on local capabilities is used.  

This encoding is not without problems, namely the need to clear the whole unused part of the stack at some call and return points.  One can think of hardware support to speed up this operation, perhaps through virtual memory and page mapping tricks.  Even then it looks like an expensive operation, one that could possibly negate the performance gains obtained by having a single stack as opposed to more "spaghetti" stack designs or even to full CPS...

Finally, as already mentioned above, the approach relies on `call` and `scall` macro-instructions that are only outlined in the submission, and described by very complicated pseudocode and English prose in the companion technical appendix.  I still miss a fully formal description of 1- what instructions the macros expand to, exactly, and 2- what contract they satisfy (in the style of the contract for malloc in section 2 of the technical appendix).

### Paper #2

Paper #2 on logical relations to reason about capabilities is well taken (we definitely need semantic tools to reason about the actual guarantees offered by low-level security mechanisms such as capabilities) and competently done.  For a nonexpert like this reviewer, it's not obvious that the logical relation constructed in the paper captures what we want to know about capabilities: the paper spends more time describing how the semantic domain and the logical relation are constructed than explaining what the "fundamental theorem" implies and why it is the result we need.  

Also, it is not obvious what is new compared with earlier work by some of the authors, e.g. reference [11] in the submission.  There is a discussion at the end of section 6 but it went a bit over my head.

## Points in favor  or against

+ Ambitious paper that breaks some new ground
- Two papers in one?
+ Interesting, probably original use of hardware capabilities to guarantee high-level security properties for function calls
- Rather specific to the set of capabilities provided by the CHERI architecture
- Practical usability unclear (because of the high cost of clearing the stack)
+ Surprisingly readable given the quantity of material presented
+ Serious attempt at proving some of the expected security properties
- Only a couple of representative examples are proved, not the compilation scheme in full generality
- The description of the calling convention remains informal even in the 90-page technical appendix

## Minor remarks

p.5, bottom of page, E -> RX transition: I would have expected the private data to be RO and the code to be RX, but perhaps it's not possible.

p.6 "As long as all capabilities with write-local authority are themselves local and the stack is cleared after control is passed back by the adversary, we will see that this does not break the intended behavior of local capabilities."  This "as long as" feels like it's a painful and ineffective encoding of an intended behavior, which perhaps could be better characterized in terms of linearity.

p.7 "The stack pointer is local and has RWLX permission."  The X part raises a red flag!  Maybe you could put a forward reference to the discussion two pages down ("Note that this means we will be placing and executing  instructions  on  the  stack")

p.10 "to prevent this from happening, we need to make sure the stack capability carries RWLX authority, since the system wide assumption then tells us that the adversary cannot have global capabilities to our local stack".  It feels like the "L" capabitility is being overloaded to mean not just "this memory block has write-local authority and can contain local capabilities", but also to mean "this memory block is my stack and no other block is".  What happens when there are several stack blocks, e.g. one per thread?

p.18 "they are linked with an adversary, adv, that is allowed to allocate memory but has no other capabilities".  Is this a reasonable model of the adversary?  (Genuinely naive question.)

Section 6, p.21: Yes, "well-bracketedness" feels like a good characterization of control-flow integrity for function calls.  At least, if you don't support tail-call optimization, because in this case everything gets a lot more complicated.

p. 24 "[25]â€™s second-class or local value".  Throughout the paper but especially here: never use a reference number such as [25] as a name.
