* Reasoning about a capability machine with local capabilities
** Subtitle: provably safe stack and return pointer management (without OS support).

** Introduction

*** Introduce capability machines
*** Enforcing properties on a capability machine

    Privacy of local state using memory capabilities.
    Encapsulation of private state using enter pointers or CHERI's ccall.
    (mention in passing secure compilation, full abstraction)

*** Well-bracked control flow and encapsulation of stack frames
    
    Hard to enforce using standard capabilities:
    - Well-bracketed control flow can be broken if the adversary stores return pointers.
      (alternative: trusted stack)
    - Encapsulation of local stack frames can be broken if the adversary stores stack pointers.

*** Local capabilities

    - Introduced by CHERI for this purpose.
    - Explain how they can be used for passing return pointers and stack pointers.
    - But this is not watertight.
    - Example attack:
      + In a first invocation, adversary fills the entire unused part of the stack with copies of the current stack pointer
      + In a second invocation, adversary can load the old stack pointer of the stack
      + He now has access to private state that was pushed on the stack in between.
    - So:
      + Can we make it (provably) watertight?
      + Is the trusted stack necessary? Why not just pass return pointers locally?
      + General question: How to reason about capability machines and
        local capabilities?

*** Contributions

    - Formal model of a simple but representative capability machine with local capabilities
    - Detailed study of how to do safe stack and return pointer management in this setting, taking into account:
      + untrusted adversary
      + higher-order code: callbacks passed to and received from the adversary
      + efficient stack management
      + no OS support
    - Logical relation for reasoning about code in this capability machine
    - Fundamental theorem that expresses the guarantees offered by a capability machine for untrusted code
    - Technical contributions: reuse existing ideas in a new way:
      + replace biorthogonal closure by a single orthogonal closure
        because assembly languages remove the distinction between the
        continuation and the arguments
	LB: we need to relate this carefully to Hur-Dreyer, who used
        biorthogonality even though they also worked with an assembly
        language. (If I recall correctly, they assumed some properties
        of the low level language, which is why the biortho was the
        right ting, but we need to check.)
      + STSs with public/private transitions for dealing with local capabilities: play the same role as before, but in different places of the LR.
    - Demonstrate all of this on several examples:
      + security examples
      + the most challenging examples from existing literature on reasoning about well-bracketed control flow in lambda calculi
      + some compartmentalisation result?
      + whatever else we do..

*** Outline

** A capability machine with local capabilities

   Formalisation

   Explain our model of linking

** Stack and return pointer management using local capabilities

   - Issues to consider:
     + no global store-local capabilities
     + clearing the stack
     + constructing return pointers
     + constructing callbacks
     + invoking the adversary's callbacks
   - Reusable macro-instructions for stack and return pointer management
     + taking care of the stuff above
 
** LB: maybe we can present the examples informally before the logical relation and then return to them after the logical relation (to present the formal properties) ?

** Logical relation
   
   - Intuition
   - Worlds
   - Logical relation
   - Fundamental theorem
   - Discussion/comparison with related Dreyer-Neis-Birkedal and with Hur-Dreyer

** Examples
   - Ticket dispenser
   - The awkward example and variants
   - A sandboxing example?

     For example, an untrusted advertisement scenario with initialization code
     that registers a redraw callback. The redraw callback gets temporary
     read-write access to a framebuffer.
  
   - Some compartmentalisation result?

** Discussion, future work
   - A general well-bracketed control flow result?
     + what would that result say?
     + possible idea: fully abstract compilation from an assembly language with
       a trusted stack to one without
     + the LR and some of the lemmas already imply well-bracketed control flow, as seen in examples
   - Relation to local parameters in Scala, Algol/Pascal second-class function parameters?
   - Stack clearing realistic?
   - Non-modularity of heap allocation requirement for adversary callbacks

** Related work

   - Dreyer-Neis-Birkedal
   - CHERI papers
   - Akram's thesis
   - http://2016.splashcon.org/event/splash-2016-oopsla-gentrification-gone-too-far-affordable-2nd-class-values-for-fun-and-co-effect
   - other papers that enforce well-bracketed control flow at low level
     (using a trusted stack manager)
     + http://ieeexplore.ieee.org/abstract/document/7536364/
     + http://ieeexplore.ieee.org/abstract/document/7536366/
     + other stuff?

** Conclusion
