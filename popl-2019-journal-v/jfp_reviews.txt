R1> Though the high-level ideas make sense, I feel that the technical details of the
R1> paper, especially Sections 4.2, 4.3 and 5, are hard to digest, even for experts.
R1> More polishing would have made a huge difference.  There are numerous typos,
R1> grammar issues, inconsistent and confusing notation...  The text feels bloated
R1> at times, making it hard to understand what the important points are.  For
R1> instance:
R1> 
R1> > everything safe for a trusted component to have without breaking memory
R1> > invariants [l. 2703]
R1> >
R1> > The words in Vtrusted but not in the Vuntrusted have the potential to break
R1> > the system invariants" [l. 2710]
R1> >
R1> > use an arbitrary configuration may contain words that can be used to break
R1> > memory invariants" [l. 2840]
R1> >
R1> > we cannot take arbitrary components as they could potentially break memory
R1> > invariants" [l. 2891]
R1> 
R1> Nevertheless, given the importance of this work for the field, and given that
R1> the main problems lie in the additions to the POPL paper, I would still
R1> recommend acceptance, provided that the authors make a few more polishing
R1> passes.  I have included a few specific points to watch out for below, but the
R1> list is not exhaustive.  A grammar and spell checker would help.  The text would
R1> also be much clearer if you trimmed it a bit -- I feel that you could remove
R1> about 10 pages worth of unnecessary text.
R1> 
R1> # Things to revise
R1> > For simplicity, LCM assumes an infinite address space and unbounded
R1> > integers. [l. 177]
R1> 
R1> It would be useful to discuss the possible impacts of removing this feature.  In
R1> particular, since you cannot have a useful fully abstract compilation scheme
R1> from a language with infinite memory to a finite abstract machine, the proof
R1> strategy would probably have to change.
R1> 
R1> > The decode : Word → Instr should be surjective ... [l. 465]
R1> >
R1> > The encode: Instr → ℤ function should be injective .. [l. 470]
R1> 
R1> Since these functions cancel each other, the surjectivity and injectivity
R1> assumptions are redundant.  (A similar remark applies to the $decodePerm$
R1> function below.)  You are also missing a "function" after "decode".

We have removed these assumptions (and fixed a problem with mixing up decPerm and encPerm).

R1> > Some simplifications have been made in this presentation of LCM. [l. 538]
R1> 
R1> What are the simplifications?

Good question?

R1> I find Figures 6, 7 and 8 hard to interpret.  What are the red frames?  What are
R1> the white frames?  Why are some capability ranges dashed while others are solid?
R1> It would help to explain what the graphical conventions mean.

TODO

R1> I do not understand what $off_{pc}$ and $off_{σ}$ are.

We have clarified this in the caption of Figure 9.

R1> What is the box symbol in l. 985?

Latex error, sorry, this should have been a Phi.
 
R1> > a component’s code memory may contain only data and set-of-seals capabilities
R1> > [l. 962]
R1> 
R1> What about instructions?

Yes, encoded instructions are just numbers, we have clarified.

R1> > a well-formed component respects Write-XOR-Execute [l. 1039]
R1> 
R1> You should comment on how this restriction might be lifted in the future to
R1> support dynamic code generation, as you hinted in (5) [l. 800]

TODO

R1> Definition 2 (l. 1206) is confusing.  It seems that it is trying to rule out the
R1> case where the code memory agrees with a code gadget exactly on $dom(ms_{code})
R1> ∩ [a - i, a + call_len - i - 1]$, but it is not the case that $[a - i, a +
R1> call_len - i - 1] ⊆ dom(m_{code})$.  It would be nice if you pointed out
R1> explicitly what you want to rule out, and why it simplifies your development.

TODO

R1> > The sub-worlds are partial maps from names RegName (not to be confused with
R1> > register names) [l. 1542]
R1> 
R1> You should give this a different name -- it is exactly the same as the one for
R1> register names!  What about simply `Name`?

Apologies, this set is actually called RegionName in the TR, but was shortened to RegName at some point and we apparently missed the overlap with the set of register names.
Renamed to RegionName.
 
R1> > The world join does not guarantee that the result is a sensible world with
R1> > respect to authority or memory specification [l. 1781]
R1> 
R1> I don't see what you mean.

Clarified this paragraph.

R1> What is the $gc$ index on l. 1876?

TODO "global constants", forgot what else is there besides stk_base

R1> > Further, the stack frames should be in the part of the memory we agree to be
R1> > the stack which means that the addresses should be _smaller_ than stk base.
R1> > Informally, this just means that the stack should be laid out in memory as a
R1> > downwards growing stack with no addresses _below_ stk base. [l. 1989, my
R1> > emphasis]
R1> 
R1> These two sentences seem to contradict each other.  How can an address not be
R1> below `stk_base` but be smaller than it?

Fixed the definition and the explanation.
 
R1> There is an odd blank at the end of page 44.

Apparently, LaTeX, in its infinite wisdom, had introduced this blank.
In the current version, it seems to have magically disappeared.

R1> It is unclear what the boxes mean in the table of l. 2141.

TODO

R1> What is $tst$ on lines 2323 and 2324? Should it be bound somewhere?

Added an existential quantifier.

R1> Line 2347 has two occurrences of $\sigma$.  I cannot tell if they are referring
R1> to the same thing or not.  Ditto line 2369.

Fixed: the first \sigma was not actually being used as a variable but simply to distinguish H^{code} from H^{code}_\sigma.
I changed this first usage by the word "seal".

R1> It is confusing that $addressable$ on line 2361 is used before it is defined
R1> (l. 2432).

Fixed.
 
R1> What is the $.H$ notation in the definition of $readCondition$? [l. 2449]

This just projects out the H-predicate from the region W.heap(r).

R1> > write permission, generally speaking, does not entail read permission
R1> > [l. 2480]
R1> 
R1> This contradicts the permission hierarchy of Figure 1, where write permission
R1> does entail read permission.

Yes, that's why the value relation will require *both* the read and write condition for rw* capabilities.

R1> > If we see reasonable behavior as defined behavior, then our full abstraction
R1> > result can be seen as an application of this same idea [l. 3193]
R1> 
R1> There is an important difference between "reasonable behavior" for LCM programs
R1> and "defined behavior" as in Abate et al.'s work. To paraphrase the authors
R1> [l. 3060], "reasonable behavior" is something that we can expect the compiler to
R1> enforce, thus we never need to worry about its absence. By contrast, ensuring
R1> "defined behavior" is entirely the programmer's responsibility, which often
R1> fails in practice.
R1> Abate et al.'s RSCC attempts to provide guarantees in those
R1> cases as well, and thus has a more complicated definition than full abstraction.
R1> I would prefer to leave out this sentence and to connect this paragraph with the
R1> next one [l. 3195], which has a more meaningful discussion of the relationship
R1> between the present work and Abate et al.'s.

Some of your comment suggests that we attempt to enforce reasonable behavior in our compiler, so just to clarify: this is not the case.
l.3060 refers to a scenario where the source language program is not directly written by a programmer but by a previous compiler (pass).
In such scenarios, it is the previous compiler pass's responsibility to produce reasonable components, but when a programmer directly writes oLCM code, it is the programmer's job, same as for SCC.

I thought about your comment and I think the problem is essentially that the phrase "If we see reasonable behavior as defined behavior, then our full abstraction result can be seen as an application of this same idea [l. 3193]" should refer only to Juglaret et al.'s SCC.
In other words, "this same idea" refers to a secure compilation result that is restricted to a form of well-behaved components ("fully defined" resp. "reasonable").
It does not refer to the idea in Abate et al. of proving partial resuls for programs that are well-behaved only until a certain point.

To address this problem, I have moved the reference to Abate et al. into the next paragraph, so that the phrase you refer to now only refers to Juglaret et al.'s SCC.

R2>    1. I find interesting and valuable the idea of formally defining and proving some security properties using an  overlay semantics and and a fully abstract compiler. However, I am not totally convinced by the arguments adopted  to justify fully abstract compilation for this goal *in general*. In particular from lines 1470-1476 and 3016-3020
R2>  it seems to me that fully abstract compilation is associated to the preservation of all properties of the source language, but it's not clear in which sense (necessary or sufficient condition for the preservation of the properties), nor which properties.
R2> 
R2>  Recent work showed that fully abstract compilers in general do not preserve all source *trace* properties  (e.g. Abate et al. 2019, https://arxiv.org/abs/1907.05320, https://arxiv.org/abs/2006.14969) and traces can be abstract mathematical objects, not necessarily sequences of inputs and outputs but for example sequences of steps in the operational semantics.
R2> 
R2>  I would suggest to rephrase the above mentioned lines in a crisper way, it should suffice use as argument that  contextual equivalence entails WBCF and LSE so that these are among the properties that are preserved by the compiler.
R2> 
R2>  Any case this does not affect the technical result of the paper, following the proof one gets convinced that WBCF  and LSE should be preserved. I believe, similarly to the authors, that since the backtranslation is the identity   the criterion RrHP from Abate et al. is satisfied and this should be enough to guarantee WBFC and LSE, even in case full abstraction would not suffice.
R2> 
R2>  ----------------------------------------------------------------------------------------------------------------
R2>    2. line 3190 - 3192:
R2> 
R2>       "In follow-up  work, Abate et al. (2018) extend this approach to scenarios where components only start to exhibit   undefined behavior after a number of well-defined steps."
R2> 
R2>        I think this slightly imprecise, undefined behavior can be exhibited at *any* moment of the execution.
R2> 
R2>   The same sentence is also a bit misleading since it seems to suggest Abate et al. 2018 prove a variant of fully abstract compilation, while I believe they prove preservation of some (sub)class of Safety properties.

R3> First, please mention much earlier in the paper that "linear" in this
R3> context means what is normally called "affine" (used at most once). It
R3> looks like it is not mentioned explicitly until page 39(!) in the
R3> midst of a technical section on the logical relation.
R3> 
R3> Next, I think the explanation of a view things about CHERI and the
R3> calling convention can be improved. First, the fact that capabilities
R3> pair a range of authority with a "current" address is a bit confusing
R3> and I think certain word choices you used confused me more. More on
R3> this in the detailed comments below. For the calling convention, you
R3> have a lot of nice high-level overview, but you should expand on the
R3> part that actually shows the code implementing the calling
R3> convention. Again, more details below.
R3> 
R3> One thing that might be discussed is tail-calls. The restriction that
R3> local stack frames are non-empty means that mutually distrusting
R3> components cannot make tail-calls between each other. I think it is
R3> inevitable that tail calls between mutually distrusting components
R3> require extra memory, but could you adjust the calling convention so
R3> that these take up extra heap-space memory rather than stack space? It
R3> seems to me to be only necessary because you are using the stack
R3> addresses to simulate dynamic seal allocation.
R3> 
R3> One related work that I think you miss is on the correctness/full
R3> abstraction of affine continuation-passing style. To my type theoretic
R3> prejudiced-eyes, the calling convention here looks like it is an
R3> implementation of affine (technically affine as discussed),
R3> closure-converted continuations. The abstract type of the existential
R3> in the closure conversion type is implemented using (static) sealing
R3> in the target language. And the affinity of the stack capability with
R3> the abstract typing is enough to make the whole thing essentially
R3> affine. So it seems to me that the result of this paper is a low-level
R3> direct analogue of work on full abstraction of affine
R3> continuation-passing. I believe this was first proven using game
R3> semantics by Laird "A Game Semantics of Linearly Used Continuations"
R3> FoSSaCS 2003 and see Berdine-O'Hearn-Reddy-Thielecke HOSC 2002 for a
R3> general overview of the idea.
R3> 
R3> # Detailed Comments
R3> 
R3> Page 3 line 61: "virtual-memory based" the correct hypenation here is
R3> unclear to me. I'd suggest "security primitives based on virtual
R3> memory".
R3> 
R3> Page 6: The paragraph on sealed capabilities is quite confusing to me.
R3> 1. Tell the reader that seals are simply natural numbers at the
R3>    beginning, or they won't understand what a range of seals must mean
R3> 1. By the time I got to the last sentence where you said (1) and (2) I
R3>    forgot what (1) and (2) were and had a hard time finding
R3>    them. Maybe give them names, rather than just (1) and (2)?
R3> 2. why do capabilities and seal capabilities combine a range with a
R3>    "current" address/capability? This seems to be a design choice with
R3>    CHERI, but you only indirectly comment on it.
R3> 
R3>    This makes the explanation of the capabilities confusing. For
R3>    instance, you say "Such a capability represents the authority to
R3>    seal other capabilities with seals in the range [sbase,send]." But
R3>    these capabilities represent that authority *paired with* a current
R3>    seal.
R3> 
R3> Page 7: layout here: it's hard to see that these are actually 2
R3> figures since they are consecutive.
R3> 
R3> Page 9: "the operational side of the sealing in LCM". Awkwardly
R3> worded. I would say "2 instructions manipulate seals" or something
R3> like that.
R3> 
R3> Page 8: in the xjmp rule, you use an inconsistent notation for
R3> updating two memory addresses. You write Phi[reg.r1,r2 |-> w1, w2]
R3> whereas everywhere else in the table the analogous notation would be
R3> Phi[reg.r1 |-> w1][reg.r2 |-> w2].
R3> 
R3> Page 12: when explaining encodePerm/encodeLin/encodeType, point out
R3> that these are only used in the appendix, so the reader doesn't go
R3> looking for them in the figure.
R3> 
R3> Page 18: While section 3 is nice as an overview of the idea behind the
R3> calling convention, there could be some more prose on the actual code
R3> of the calling convention in Figure 9. For instance, you don't mention
R3> that r1 and r2 constitute the callee closure or that rt1 and rt2 are
R3> "temp registers". I misread t1 as tl initially and thought it meant
R3> the tail of the stack.
R3> 
R3> Page 18, Figure 19, the line 21: should be "cca rt2 1" if I understand
R3> the code correctly. Currently it's missing the instruction.
R3> 
R3> Page 35 line 1542: "RegName (not to be confused with register names)?"
R3> Please just rename this to RegionName!
R3> 
R3> Page 35 1541-1546: This whole part is very confusing. First you say
R3> sub-worlds are partial maps from names to invariants, then you say you
R3> need to define what you mean by invariants. Then you say you call the
R3> invariants regions because they are not invariant. So do you call them
R3> invariants or regions? I think this is based on the terminology
R3> *invariant* being more common for this concept in prior work? If so,
R3> then say that.
R3> 
R3> Page 36: Paragraph starting at 1583 explaining shadow regions is
R3> confusingly worded, especially the last sentence about compatible
R3> worlds, since the terminology "compatible" hasn't been introduced yet.
R3> 
R3> Page 38: when introducing the future world relation, please inform the
R3> reader which side of the greater-than sign is the "past" and which is
R3> the "future"
R3> 
R3> Page 40: definition 11 is running off the page?
R3> 
R3> Page 47: Ok, finally it is revealed that you are using C.O.F.E's as
R3> your domains. I just want to get on the soapbox for a second here. I
R3> think it is great that you spent most of section 5 giving an in-depth
R3> overview of the construction of worlds, intuition behind the design
R3> choices etc. However, I must lament the fact that we are still at the
R3> point where all of this intution must be given separately from any
R3> technical details like domain theory and that we don't have enough of
R3> a handle on what the "informal mathematics" of step-indexing looks
R3> like. I would just like to encourage the authors to think about what
R3> that would look like, in the same sense that we can do "informal"
R3> constructive mathematics without talking about some specific topos.
R3> 
R3> Page 48: The table starting at line 2142 is a bit hard to read,
R3> specifically it could use some lines to distinguish different rows
R3> from each other so it's clearer that the V_untrusted and R relations
R3> are the ones that are safe to pass to adversarial code.
R3> 
R3> Page 49: When you say you define two observation relations just
R3> quickly say what they are "when an oLCM conf approximates an LCM conf
R3> and vice-versa".
