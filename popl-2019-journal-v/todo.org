* Components
** DONE Spell out component definition
Already in the paper.
** DONE Spell out well-formed judgements
** Spell out reasonable definition
** DONE Spell out linking
Already in the paper.
* Semantics
** TODO Describe decode function
- Pasted in a wrote some text.
TODO
- Read and change text
** Describe seals better
** Add missing instructions
The missing instructions are: getb, gete, gettype, getl, getp, jnz, plus, minus, lt, seta2b, restrict
** Describe how xjmp can be used for unsealing capabilities if seal is available
At this time, it is only mentioned that it can be done
** Add example of instruction with updated semantics in oLCM, e.g., split that now has a stk cap case.
* Logical relation
** Include world definitions, lemmas, and theorems.
** Include world operators (oplus and uplus)
** Expand Value relations
** Include E_xjmp r
elation
** Include memsat
** Include H_\sigma
** Include standard regions
** Include C relation
** Include EC relation
** Make FTLR precise
* Discussion
** What properties do we want to enforce
We want to enforce the properties of the high-level language. It is given that
we want to program in high-level languages, but it is not given what language or
what properties it should have. However, no matter what properties we want, we
need to be able to rely on them which requires that they are enforced.

In terms of defining the properties, it seems to be natural to let the semantics
of the programming language drive the definition. After all, we want the
properties of the language. Overlay semantics does exactly this.
** Vertical and horizontal composition of fully-abstract compilers
Composes vertically but not horizontally.
That is, if we had the properties we wanted, we construct compilation from high-level language to oLCM and they would compose nicely (given we can show the  conditions).
** Why conditional full-abstraction
We do not want the compiled code to have protection against itself.
** Other notions of secure compilation
It is not given that full-abstraction is the notion of secure compilation we want. Discuss other possibilities and whether overlay semantics could be useful.
https://arxiv.org/abs/1807.04603
https://arxiv.org/abs/1804.00489
https://people.mpi-sws.org/~marcopat/marcopat/Publications_files/poly-seal-no.pdf
** Machine checked proof
** Other notions of control-flow
This fits with one notion of control-flow. What happens if we have another notion of control-flow we want to enforce. Can we do exceptions? Probably, as the caller pass a sealed capability for exception handler along with the return capability to the callee both selaed with return seal. (can oLCM support this or do we need a different abstraction? oLCM is not far off. This would handle exceptions as stack unraveling sticking to call order.)
** Cannot do the "classic" pass pointer for stack allocated memory for return values
But we can still read all words left on the stack.
** How to construct overlay semantics for new lang and importance of the retaining the same syntax
If we don't, we will have to come up with new syntax. Further, say we had
introduced new instruction, how would we do the back translation? We would not
be able to tell whether a series of instructions came from a call or a series of
instructions that just look like a call. With this approach everything that
looks like a call is a call. The back translation is simply the identity making
things a lot easier.
