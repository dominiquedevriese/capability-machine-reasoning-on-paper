We thank the referees for their diligent reviews and appreciate the thorough feedback.

We have addressed comments about minor textual issues.
The major revisions to the paper are as follows:
 * added better captions for the figure illustrating the calling convention
 * added intuition about world extensionality
 * rewritten the section that describes the logical relation
 * added better descriptions of the definitions in the Appendix
 * added a reference to a recently published better way of defining well-bracketed control flow and local state encapsulation
 * added a discussion of the challenges involved in lifting the unrealistic assumptions we make on the capability machine (unlimited memory, unbounded integers, and simpler ISA)
 * added a discussion of the necessity of a logical relation over other methods

We have taken all comments on textual issues into considerations. In case, reviewers feel their comments have not been addressed sufficiently, please let us know what improvements would be helpful. In particular, we have left the introduction largely unchanged as we find that it has a good length and level of detail. We acknowledge that the reviewers may disagree, and we are happy to look at concrete suggestions for improvements.

Referee 1:

"Where the paper falls short in its current state is in terms of
contextualising the work. Specifically, one cannot tell from the current
presentation to what degree the formalisation of capability safety is novel wrt
recent work of Devriese et al. (EuroS&P 2016, hereafter referred to as
"Devriese")."

This is, to some degree, discussed in the "Discussion" section under "Logical
Relation" and "Public/private future worlds" and the relation is repeated in the
"Related Work" section. We outline the main differences in this discussion and
do not see how to improve further on this point.

"to what degree is the highly advanced machinery of this form of logical
relation necessary for formalising capability safety?"
We have added a comparison to the work of "Sewell et al.'s (ITP 2011) "seL4
Enforces Integrity" to contrast our approach to the more common graph based
approach to capability safety. We highlight how our approach give a more
expressive notion of invariants which allows us to prove the awkward example.
Futher, we highlight the fact that the notion of capability safety shouldn't be
boiled down to just available permissions. Capability safety should also take
behaviour into account.

"On the other hand, the technical setup is quite involved, making it hard to
understand how each detail fits in the big picture. Though examples like the
awkward example of Section 8 have proved difficult to handle before, it is hard
to imagine how this technique could scale up to more realistic programs given
the intricate proofs involved."

"> For simplicity, we assume that memory allocated through malloc cannot be
> freed. [l302]

In a more realistic design, how would you prevent code from misusing previously
freed memory?"
We added a footnote that sketches how this would work in a real setting.

"> State × Rels corresponds to the aforementioned state transition system where
> Rels contains pairs of relations corresponding to the public and private
> transitions. [l683]"

We have changed the name of the set of transition system states from "State" to
"RState" to emphasise that the set contains region states. We do not want to
come up with new terminology for states in a transition system as we suspect
that this will be confusing as well.

"> In the future world relations, we must remember all region names in order to
> keep them extensional which is why we need to use masks... [l723]

I could not understand this paragraph. What does it mean to keep a region
extensional? Could you give some intuition for the "technical reasons" that
require revoked regions?"
It is the world that needs to be extensional. We have clarified this in the updated version.

Generally speaking, a world is a collection of invariants.
An invariant is only invariant when it does not change over time.
The future world relation relates worlds over time, so for the invariants in the world to truly be invariant they must also be present in the future world.
The fact that invariants stay present in future worlds means that once we have seen an invariant we can rely on them in future worlds.
At some point, people needed to be able to get rid of invariants in future worlds (e.g., Thamsborg & Birkedal 2011 and Amal 2014).
However to resolve the circularity in worlds domain equation, it was not possible to just remove the invariants from the world.
It turned out that the technical necessity was for the invariant *names* to stick around, so the solution became to make the invariants evolveable in the sense that they could end up requiring nothing on the heap.

In recent work (Skorstengaard et al 2019), the future world relation has been generalized, so an invariant name is no longer tied to a specific invariant.
The future world's invariants must still have a future invariant for every invariant in the past world, but the invariant may have changed name in the new world.

We have tried to add a bit of intuition about world extensionality. However, in the end it is the solution to the recursive domain equation that requires the world to be extensional. We believe adding more intuition may be a bit of a stretch.

"> ... as those that contain safe words (i.e. words in $\mathcal{V}$).  [l757]

At this point, I had lost track of what $\mathcal{V}$ was. Given that
$\mathcal{V}$ is defined in the following paragraph, perhaps you could remove
the parenthesis, or simply swap the two paragraphs."

Added a forward reference. The logical relation is recursively defined, so
swapping the two paragraphs would just move the problem. We have added this
point to the introduction of the section, so the reader is advised about the
circularity.

"I did not understand the explanation about the notation $\stackrel{n}{⫇}$
[l773]. What does it mean for $W(r)$ to accept a value? Regions contain
predicates on memory segments, and not on values.  It would be useful to remind
the reader that the formal definition is in the appendix."

The logical relation has been rewritten to be more clear.
We have clarified the above and added a reference to the appendix where the relation is defined.

"You could include Figure 12 on the top-right corner of Figure 13 to improve
readability.

It is not very clear whether the variable $ofc$ in Fig. 12 the same as the
variable $ofc$ in Fig. 13.  (I imagine it isn't, given that the offset to the
label "after" in Fig. 13 is more than five instructions long.)"

Updated the figure to make it clear that the two offsets are not the the same.
Further, added the return code to the scall figure as suggested.

"Lemma 7.2 needs more explanation.  Things such as $ι^{sta}$, $revokeTemp$,
"pointing to stack", etc. need to be defined near the statement of the lemma, or
at least explained with some intuition, even when they are defined in the
appendix. I am also not sure about where some variables are quantified (e.g
$ms''$)."
Added a paragraph that explains the undefined things with references to the definitions in the appendix. We also added a figure to illustrate the "looking at" and "points to stack" definitions.

"Maybe the awkward example of 8.2 would be easier to follow if we had the
original ML-like code for reference."
TODO

"> it is also important for the reasoning about x that this is a private future
> world. [l1516]"
As stated in the paper, we ignore details about x as they can be found in high-level proof. We would like to keep the details out of the paper. We would also like to keep the comments as it helps the interested reader cross-reference with related work were details about x are fully-explained.

To explain why it is important for the reasoning take a look at the figure in the appendix illustrating \iota_x.

At this point of f4, we do not know whether \iota_x is in state 0 or 1. It can be in state 0 if this is the first time the closure is called, but \iota_x can also be in state 1 if this closure was provided as the callback for the closure, and this is the second callback (before the second callback, x is set to 1). This is why \iota_x at this point can be in either state 0 or 1 of the region.

The execution of the closure will set x to 0, so we need to set \iota_x to be in state 0 to show that the memory satisfies the world. Because the region may be in state 1, we must take the private transition which can only happen in a private future world.

"I find the semantic vs. syntactic contrast discussed in l1670 ill defined.
Using your get* instructions it should be possible to test whether the range of
a capability is contained in the range of another capability, hence to encode an
assertion to test that property. However, you first characterize range
properties as "syntactic," and later state that an assertion never failing is
"semantic" (l1688). It would be best to avoid this classification."

We rewrote this discussion, so it no longer classifies the properties as semantic and syntactic.

Referee 3
"> The machine described is not particularly realistic: it uses unbounded arithmetic and assumes there is an infinite address space. The authors claim that this is to avoid uninteresting details (l137-l138). Verifying realistic models is not "uninteresting". No intuition is given on how future work can lift such assumptions. "
We added a discussion about lifting these requirements to the discussion section and a forward reference to the place where these assumptions are made.

"I found the additional figures rather confusing "
We added more captions to the figures to clarify what they illustrate.

"> Introduction:
>> It would be good to expand the introduction and include a smoother introduction to the topic.
>> The paragraphs include more than one main idea making them hard to follow. Consider a better split of topics.",
"  > l55. The examples in the introduction are often unclear and need more elaboration.
  For instance, on l55, consider expanding them rather than quick mention between brackets.",
and "> l74, l276. What do you mean by watertight?"
We think the introduction reads rather well, has a good size, and explains things in a sufficient detail (given that further explanations are given later in the paper). If there are specific suggestions for improvements to the introduction, then we are happy to take them into consideration.

"> l26, l26. control-flow correctness, local encapsulation, etc.
  etc. -> What other properties are programmers interested in?"
The answer to this question is all language properties. Hyrum's Law (http://www.hyrumslaw.com/) also applies to programming language abstractions and properties, so if a property is in a language, then it should be enforced. 

"> l84-l89. Our calling convention can be efficient assuming the processor has an instruction that can efficiently clear a range of memory.
  I doubt this a realistic assumption to be making."
This is discussed in the discussion section.

"> Figure 3. could you provide an intuition of why RWX <= RWLX despite L<=G.
  I would have intuitively expected the opposite."
We update the text to be more clear on this. Basically "write local" authority subsumes the "write" permission, so if you have WL access, then you can write local an global capabilities. This means that by going from RWLX to RWX you give up the permission to write local capabilities. If L <= G was turned around, then it would undermine the idea with write local capabilities. In that scenario given a local capability, you could make it global and store it with a normal capability.

"> l159. How does your jmp instruction differ from a standard jump."
TODO This is explained later in the section. The jmp instruction has special behaviour for the enter capability. Otherwise, it works the same as a standard jump. Note that the capability range check on the pc happens on each execution step. If the current address of a capability used in a jump is out of range, then the execution will fail in the next step.

"> l260-l265. What are the consequences of your local capability model as opposed to CHERI's? Does allowing local capabilities to be passed across module boundaries have any impact on security? If so, what impact does it have?"
We discuss the limitations and complications related to local capabilities in the discussion section. We are happy to look at suggestions for additional relevant topics to cover in the discussion.

"> l295. "a special register r_{stk}" containing a stack pointer?"
Yes, that is what is conveyed by "for which we receive a stack pointer in a special register r_{stk}" tries to convey. 

"> Figure 4. What is sp?
  I couldn't understand what this figure is trying to convey."
Added to the caption what sp is. Added captions to each of the subfigures explaining what they illustrate.

"> l425. "the activation record" -> "what we call an activation record"
        it is not introduced at this point"
Activation records are a fairly common concept, so we have not implemented this change.

"> l451. "calling convention should be combined with protection against stack smashing attacks"
        It would be nice to have a summary of these somewhere."
We have added a reference to the paper "The CHERI Capability Model: Revisiting RISC in an Age of Risk", ISCA 2014 which presents this in relation to CHERI. The same principles can be transferred.

The basic idea is that all loads/stores are done relatively to a capability. If a load/store is attempted outside the capability's range of authority, then it fails. In order to prevent stack smashing, the programming languages simply needs to make sure that capabilities for freshly allocated memory has a range that only covers the allocated memory. Any attempts at writing or reading outside allocated memory will now fail dynamically.

"> l514. Introduce what well-bracketed control flow means."
There is no good definition of well-bracketedness in the literature which is why we do not formally define it. To our knowledge, the best attempt at defining well-bracketed control flow can be found in our POPL19 paper "StkTokens: Enforcing Well-bracketed Control Flow and Stack Encapsulation Using Linear Capabilities". We have added a reference to the StkTokens paper in the discussion.

"> l551. what are V and P? I don't believe they were introduced."
The line reads "we need to define the set V(W) \in P(Word) of words that are safe w.r.t. W." That is, we need to define V, the set of safe words (technically, world indexed set). P is the power set, so P(Word) is the power set of Word.

"> Figure 7. What is the difference between red and green (if any)?"
They are two different global regions as the legend suggests.
